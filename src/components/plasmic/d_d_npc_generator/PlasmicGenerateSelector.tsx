// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b5WcywRoms9zdBws8HK6N7
// Component: Aj6PI_7LPB7
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Select from "antd/lib/select"; // plasmic-import: 2YpGIhkzkpc/codeComponent
import { Option } from "rc-select"; // plasmic-import: YRr0RPAdEj/codeComponent
import Checkbox from "../../Checkbox"; // plasmic-import: nPjHAnzGVYU/component
import { Slider } from "@plasmicpkgs/antd/skinny/registerSlider"; // plasmic-import: iBC45mjTXv/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: fvt7-zOYU04/component
import Button from "../../Button"; // plasmic-import: xeFM0tPhg2-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_d_d_npc_generator.module.css"; // plasmic-import: b5WcywRoms9zdBws8HK6N7/projectcss
import sty from "./PlasmicGenerateSelector.module.css"; // plasmic-import: Aj6PI_7LPB7/css

import InfoIcon from "./icons/PlasmicIcon__Info"; // plasmic-import: f0bJZJ00T/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: _92sYGu6Vhw/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 8d9W5hPSEbQ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: pnFO32SGCAi/icon

export type PlasmicGenerateSelector__VariantMembers = {
  tavern: "tavern";
};
export type PlasmicGenerateSelector__VariantsArgs = {
  tavern?: SingleBooleanChoiceArg<"tavern">;
};
type VariantPropType = keyof PlasmicGenerateSelector__VariantsArgs;
export const PlasmicGenerateSelector__VariantProps = new Array<VariantPropType>(
  "tavern"
);

export type PlasmicGenerateSelector__ArgsType = {};
type ArgPropType = keyof PlasmicGenerateSelector__ArgsType;
export const PlasmicGenerateSelector__ArgProps = new Array<ArgPropType>();

export type PlasmicGenerateSelector__OverridesType = {
  root?: p.Flex<"div">;
  overallTooltip?: p.Flex<"svg">;
  genderSelect?: p.Flex<typeof Select>;
  raceSelect?: p.Flex<typeof Select>;
  alignmentSelect?: p.Flex<typeof Select>;
  abilityScoreTooltip?: p.Flex<"svg">;
  abilityScoreSelect?: p.Flex<typeof Select>;
  jobSelect?: p.Flex<typeof Select>;
  plotHookCheck?: p.Flex<typeof Checkbox>;
  genderSlider?: p.Flex<typeof Slider>;
  primaryRaceSelect?: p.Flex<typeof Select>;
  diversityTooltip?: p.Flex<"svg">;
  diversitySlider?: p.Flex<typeof Slider>;
  economicsTooltip?: p.Flex<"svg">;
  economicsSelect?: p.Flex<typeof Select>;
  alignmentTooltip?: p.Flex<"svg">;
  alignmentDistributionSelect?: p.Flex<typeof Select>;
  plotHookPercentage?: p.Flex<typeof TextInput>;
  totalCount?: p.Flex<typeof TextInput>;
  generate?: p.Flex<typeof Button>;
  swapView?: p.Flex<"div">;
};

export interface DefaultGenerateSelectorProps {
  tavern?: SingleBooleanChoiceArg<"tavern">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicGenerateSelector__RenderFunc(props: {
  variants: PlasmicGenerateSelector__VariantsArgs;
  args: PlasmicGenerateSelector__ArgsType;
  overrides: PlasmicGenerateSelector__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "tavern",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.tavern : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        { [sty.roottavern]: hasVariant($state, "tavern", "tavern") }
      )}
    >
      {(hasVariant($state, "tavern", "tavern") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__znj6U, {
            [sty.freeBoxtavern__znj6U6EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vygwa,
              {
                [sty.texttavern__vygwa6EOuz]: hasVariant(
                  $state,
                  "tavern",
                  "tavern"
                )
              }
            )}
          >
            {hasVariant($state, "tavern", "tavern")
              ? "Fill My Tavern!"
              : "Generate an NPC"}
          </div>

          {(hasVariant($state, "tavern", "tavern") ? true : true) ? (
            <InfoIcon
              data-plasmic-name={"overallTooltip"}
              data-plasmic-override={overrides.overallTooltip}
              className={classNames(projectcss.all, sty.overallTooltip, {
                [sty.overallTooltiptavern]: hasVariant(
                  $state,
                  "tavern",
                  "tavern"
                )
              })}
              role={"img"}
            />
          ) : null}
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___2276G, {
            [sty.freeBoxtavern___2276G6EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__i7Z0P
            )}
          >
            {"Gender"}
          </div>

          <Select
            data-plasmic-name={"genderSelect"}
            data-plasmic-override={overrides.genderSelect}
            className={classNames("__wab_instance", sty.genderSelect)}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3NIn0
                )}
              >
                {"Select…"}
              </div>
            }
            size={"large" as const}
            virtual={true}
          >
            <Option
              className={classNames("__wab_instance", sty.antdOption__fubjT)}
              value={"Option" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__t1THp
                )}
              >
                {"Option"}
              </div>
            </Option>
          </Select>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fWqOw, {
            [sty.freeBoxtavern__fWqOw6EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6SOMk
            )}
          >
            {"Race"}
          </div>

          <Select
            data-plasmic-name={"raceSelect"}
            data-plasmic-override={overrides.raceSelect}
            className={classNames("__wab_instance", sty.raceSelect)}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qhhCc
                )}
              >
                {"Select…"}
              </div>
            }
          >
            <Option
              className={classNames("__wab_instance", sty.antdOption__gjAd1)}
              value={"Option" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jRgv7
                )}
              >
                {"Option"}
              </div>
            </Option>
          </Select>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__xvhQ5, {
            [sty.freeBoxtavern__xvhQ56EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mmHRd
            )}
          >
            {"Alignment"}
          </div>

          <Select
            data-plasmic-name={"alignmentSelect"}
            data-plasmic-override={overrides.alignmentSelect}
            className={classNames("__wab_instance", sty.alignmentSelect)}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mfdsW
                )}
              >
                {"Select…"}
              </div>
            }
          >
            <Option
              className={classNames("__wab_instance", sty.antdOption__ngjw4)}
              value={"Option" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n0Yfm
                )}
              >
                {"Option"}
              </div>
            </Option>
          </Select>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__dJmmO, {
            [sty.freeBoxtavern__dJmmO6EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__fPnxN)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iLiRs
              )}
            >
              {"Ability Scores"}
            </div>

            <InfoIcon
              data-plasmic-name={"abilityScoreTooltip"}
              data-plasmic-override={overrides.abilityScoreTooltip}
              className={classNames(projectcss.all, sty.abilityScoreTooltip)}
              role={"img"}
            />
          </div>

          <Select
            data-plasmic-name={"abilityScoreSelect"}
            data-plasmic-override={overrides.abilityScoreSelect}
            className={classNames("__wab_instance", sty.abilityScoreSelect)}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8H9Lu
                )}
              >
                {"Select…"}
              </div>
            }
          >
            <Option
              className={classNames("__wab_instance", sty.antdOption__mhIkp)}
              value={"Option" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__he4Vw
                )}
              >
                {"Option"}
              </div>
            </Option>
          </Select>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__mboWq, {
            [sty.freeBoxtavern__mboWq6EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___8IuZg
            )}
          >
            {"Class/Profession"}
          </div>

          <Select
            data-plasmic-name={"jobSelect"}
            data-plasmic-override={overrides.jobSelect}
            className={classNames("__wab_instance", sty.jobSelect)}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cVlnv
                )}
              >
                {"Select…"}
              </div>
            }
          >
            <Option
              className={classNames("__wab_instance", sty.antdOption__rZo)}
              value={"Option" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__funrt
                )}
              >
                {"Option"}
              </div>
            </Option>
          </Select>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___5FMj4, {
            [sty.freeBoxtavern___5FMj46EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vxGCr)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2Lr6Y
              )}
            >
              {"Plot Hook"}
            </div>

            <Checkbox
              data-plasmic-name={"plotHookCheck"}
              data-plasmic-override={overrides.plotHookCheck}
              className={classNames("__wab_instance", sty.plotHookCheck)}
            />
          </div>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : false) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___16H3S, {
            [sty.freeBoxtavern___16H3S6EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ui
            )}
          >
            {"Gender Distribution"}
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox__yw0Vt, {
              [sty.freeBoxtavern__yw0Vt6EOuz]: hasVariant(
                $state,
                "tavern",
                "tavern"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kgMvU,
                {
                  [sty.texttavern__kgMvU6EOuz]: hasVariant(
                    $state,
                    "tavern",
                    "tavern"
                  )
                }
              )}
            >
              {"Male"}
            </div>

            <Slider
              data-plasmic-name={"genderSlider"}
              data-plasmic-override={overrides.genderSlider}
              className={classNames("__wab_instance", sty.genderSlider, {
                [sty.genderSlidertavern]: hasVariant($state, "tavern", "tavern")
              })}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yzplE,
                {
                  [sty.texttavern__yzplE6EOuz]: hasVariant(
                    $state,
                    "tavern",
                    "tavern"
                  )
                }
              )}
            >
              {"Female"}
            </div>
          </div>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qky8D, {
            [sty.freeBoxtavern__qky8D6EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__f7PHn,
              {
                [sty.texttavern__f7PHn6EOuz]: hasVariant(
                  $state,
                  "tavern",
                  "tavern"
                )
              }
            )}
          >
            {hasVariant($state, "tavern", "tavern") ? "Primary Race" : "Gender"}
          </div>

          <Select
            data-plasmic-name={"primaryRaceSelect"}
            data-plasmic-override={overrides.primaryRaceSelect}
            className={classNames("__wab_instance", sty.primaryRaceSelect, {
              [sty.primaryRaceSelecttavern]: hasVariant(
                $state,
                "tavern",
                "tavern"
              )
            })}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dylCt
                )}
              >
                {"Select…"}
              </div>
            }
          >
            <Option
              className={classNames("__wab_instance", sty.antdOption__iAY)}
              value={"Option" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tgBp
                )}
              >
                {"Option"}
              </div>
            </Option>
          </Select>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : false) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__u4Th7, {
            [sty.freeBoxtavern__u4Th76EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__zVfdf)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c6Ry
              )}
            >
              {"Diversity"}
            </div>

            <InfoIcon
              data-plasmic-name={"diversityTooltip"}
              data-plasmic-override={overrides.diversityTooltip}
              className={classNames(projectcss.all, sty.diversityTooltip)}
              role={"img"}
            />
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox__pGiud, {
              [sty.freeBoxtavern__pGiud6EOuz]: hasVariant(
                $state,
                "tavern",
                "tavern"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7V0Id,
                {
                  [sty.texttavern___7V0Id6EOuz]: hasVariant(
                    $state,
                    "tavern",
                    "tavern"
                  )
                }
              )}
            >
              {"Non-Primary"}
            </div>

            <Slider
              data-plasmic-name={"diversitySlider"}
              data-plasmic-override={overrides.diversitySlider}
              className={classNames("__wab_instance", sty.diversitySlider, {
                [sty.diversitySlidertavern]: hasVariant(
                  $state,
                  "tavern",
                  "tavern"
                )
              })}
            />

            {(hasVariant($state, "tavern", "tavern") ? true : true) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__glwVw,
                  {
                    [sty.texttavern__glwVw6EOuz]: hasVariant(
                      $state,
                      "tavern",
                      "tavern"
                    )
                  }
                )}
              >
                {"Female"}
              </div>
            ) : null}
          </div>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : false) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___7GqXv, {
            [sty.freeBoxtavern___7GqXv6EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox___7RXyD)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___65OS
              )}
            >
              {"Economic Distribution"}
            </div>

            <InfoIcon
              data-plasmic-name={"economicsTooltip"}
              data-plasmic-override={overrides.economicsTooltip}
              className={classNames(projectcss.all, sty.economicsTooltip)}
              role={"img"}
            />
          </div>

          <Select
            data-plasmic-name={"economicsSelect"}
            data-plasmic-override={overrides.economicsSelect}
            className={classNames("__wab_instance", sty.economicsSelect)}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sXe7
                )}
              >
                {"Select…"}
              </div>
            }
          >
            <Option
              className={classNames("__wab_instance", sty.antdOption__pZnDk)}
              value={"Option" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u3GQo
                )}
              >
                {"Option"}
              </div>
            </Option>
          </Select>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : false) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__czdD, {
            [sty.freeBoxtavern__czdD6EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__q9MQy)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qdTm9
              )}
            >
              {"Alignment Distribution"}
            </div>

            <InfoIcon
              data-plasmic-name={"alignmentTooltip"}
              data-plasmic-override={overrides.alignmentTooltip}
              className={classNames(projectcss.all, sty.alignmentTooltip)}
              role={"img"}
            />
          </div>

          <Select
            data-plasmic-name={"alignmentDistributionSelect"}
            data-plasmic-override={overrides.alignmentDistributionSelect}
            className={classNames(
              "__wab_instance",
              sty.alignmentDistributionSelect
            )}
            placeholder={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vFy3U
                )}
              >
                {"Select…"}
              </div>
            }
          >
            <Option
              className={classNames("__wab_instance", sty.antdOption__hshb1)}
              value={"Option" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zWAdn
                )}
              >
                {"Option"}
              </div>
            </Option>
          </Select>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : false) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___8QlD, {
            [sty.freeBoxtavern___8QlD6EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox___3Bebs)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uXY
              )}
            >
              {"Plot Hooks"}
            </div>

            <TextInput
              data-plasmic-name={"plotHookPercentage"}
              data-plasmic-override={overrides.plotHookPercentage}
              className={classNames("__wab_instance", sty.plotHookPercentage, {
                [sty.plotHookPercentagetavern]: hasVariant(
                  $state,
                  "tavern",
                  "tavern"
                )
              })}
              placeholder={"0" as const}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__s0Xnj,
                {
                  [sty.texttavern__s0Xnj6EOuz]: hasVariant(
                    $state,
                    "tavern",
                    "tavern"
                  )
                }
              )}
            >
              {"%"}
            </div>
          </div>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "tavern", "tavern") ? true : false) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___6LMol, {
            [sty.freeBoxtavern___6LMol6EOuz]: hasVariant(
              $state,
              "tavern",
              "tavern"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox___4GHuP)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sccWg
              )}
            >
              {"Number (Max 1000)"}
            </div>

            <TextInput
              data-plasmic-name={"totalCount"}
              data-plasmic-override={overrides.totalCount}
              className={classNames("__wab_instance", sty.totalCount, {
                [sty.totalCounttavern]: hasVariant($state, "tavern", "tavern")
              })}
              placeholder={"0" as const}
            />
          </div>
        </p.Stack>
      ) : null}

      <Button
        data-plasmic-name={"generate"}
        data-plasmic-override={overrides.generate}
        className={classNames("__wab_instance", sty.generate)}
        color={"sand" as const}
        shape={"round" as const}
      >
        {"Generate!"}
      </Button>

      <div
        data-plasmic-name={"swapView"}
        data-plasmic-override={overrides.swapView}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.swapView,
          { [sty.swapViewtavern]: hasVariant($state, "tavern", "tavern") }
        )}
      >
        {hasVariant($state, "tavern", "tavern")
          ? "I just need one person!"
          : "I want a whole tavern!"}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "overallTooltip",
    "genderSelect",
    "raceSelect",
    "alignmentSelect",
    "abilityScoreTooltip",
    "abilityScoreSelect",
    "jobSelect",
    "plotHookCheck",
    "genderSlider",
    "primaryRaceSelect",
    "diversityTooltip",
    "diversitySlider",
    "economicsTooltip",
    "economicsSelect",
    "alignmentTooltip",
    "alignmentDistributionSelect",
    "plotHookPercentage",
    "totalCount",
    "generate",
    "swapView"
  ],
  overallTooltip: ["overallTooltip"],
  genderSelect: ["genderSelect"],
  raceSelect: ["raceSelect"],
  alignmentSelect: ["alignmentSelect"],
  abilityScoreTooltip: ["abilityScoreTooltip"],
  abilityScoreSelect: ["abilityScoreSelect"],
  jobSelect: ["jobSelect"],
  plotHookCheck: ["plotHookCheck"],
  genderSlider: ["genderSlider"],
  primaryRaceSelect: ["primaryRaceSelect"],
  diversityTooltip: ["diversityTooltip"],
  diversitySlider: ["diversitySlider"],
  economicsTooltip: ["economicsTooltip"],
  economicsSelect: ["economicsSelect"],
  alignmentTooltip: ["alignmentTooltip"],
  alignmentDistributionSelect: ["alignmentDistributionSelect"],
  plotHookPercentage: ["plotHookPercentage"],
  totalCount: ["totalCount"],
  generate: ["generate"],
  swapView: ["swapView"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  overallTooltip: "svg";
  genderSelect: typeof Select;
  raceSelect: typeof Select;
  alignmentSelect: typeof Select;
  abilityScoreTooltip: "svg";
  abilityScoreSelect: typeof Select;
  jobSelect: typeof Select;
  plotHookCheck: typeof Checkbox;
  genderSlider: typeof Slider;
  primaryRaceSelect: typeof Select;
  diversityTooltip: "svg";
  diversitySlider: typeof Slider;
  economicsTooltip: "svg";
  economicsSelect: typeof Select;
  alignmentTooltip: "svg";
  alignmentDistributionSelect: typeof Select;
  plotHookPercentage: typeof TextInput;
  totalCount: typeof TextInput;
  generate: typeof Button;
  swapView: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGenerateSelector__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGenerateSelector__VariantsArgs;
    args?: PlasmicGenerateSelector__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGenerateSelector__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGenerateSelector__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGenerateSelector__ArgProps,
          internalVariantPropNames: PlasmicGenerateSelector__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicGenerateSelector__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGenerateSelector";
  } else {
    func.displayName = `PlasmicGenerateSelector.${nodeName}`;
  }
  return func;
}

export const PlasmicGenerateSelector = Object.assign(
  // Top-level PlasmicGenerateSelector renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    overallTooltip: makeNodeComponent("overallTooltip"),
    genderSelect: makeNodeComponent("genderSelect"),
    raceSelect: makeNodeComponent("raceSelect"),
    alignmentSelect: makeNodeComponent("alignmentSelect"),
    abilityScoreTooltip: makeNodeComponent("abilityScoreTooltip"),
    abilityScoreSelect: makeNodeComponent("abilityScoreSelect"),
    jobSelect: makeNodeComponent("jobSelect"),
    plotHookCheck: makeNodeComponent("plotHookCheck"),
    genderSlider: makeNodeComponent("genderSlider"),
    primaryRaceSelect: makeNodeComponent("primaryRaceSelect"),
    diversityTooltip: makeNodeComponent("diversityTooltip"),
    diversitySlider: makeNodeComponent("diversitySlider"),
    economicsTooltip: makeNodeComponent("economicsTooltip"),
    economicsSelect: makeNodeComponent("economicsSelect"),
    alignmentTooltip: makeNodeComponent("alignmentTooltip"),
    alignmentDistributionSelect: makeNodeComponent(
      "alignmentDistributionSelect"
    ),
    plotHookPercentage: makeNodeComponent("plotHookPercentage"),
    totalCount: makeNodeComponent("totalCount"),
    generate: makeNodeComponent("generate"),
    swapView: makeNodeComponent("swapView"),

    // Metadata about props expected for PlasmicGenerateSelector
    internalVariantProps: PlasmicGenerateSelector__VariantProps,
    internalArgProps: PlasmicGenerateSelector__ArgProps
  }
);

export default PlasmicGenerateSelector;
/* prettier-ignore-end */
